/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";

import { Construct } from "constructs";
import { App, TerraformStack } from "cdktf";

class MyStack extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);

    new aws.AwsProvider(this, "aws", {
      region: "ap-southeast-2",
    });
    const awsSsmParameterHello1 = new aws.ssm.SsmParameter(this, "hello_1", {
      name: "hello_1",
      type: "String",
      value: "Hello, world!",
    });
    const dataAwsSsmParameterHello1 = new aws.ssm.DataAwsSsmParameter(
      this,
      "hello_1_2",
      {
        dependsOn: [`\${${awsSsmParameterHello1.fqn}}`],
        name: "hello_1",
      }
    );

    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsSsmParameterHello1.overrideLogicalId("hello_1");
    new aws.ssm.SsmParameter(this, "hello_2", {
      name: "hello_2",
      type: "String",
      value: `\${${dataAwsSsmParameterHello1.value}}.. Again!`,
    });
  }
}

const app = new App();
new MyStack(app, "rawInit");
app.synth();
